// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package cherami

import cherami "github.com/uber/cherami-client-go/client/cherami"
import gocherami "github.com/uber/cherami-thrift/.generated/go/cherami"
import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Client) Close() {
	_m.Called()
}

// CreateConsumer provides a mock function with given fields: request
func (_m *Client) CreateConsumer(request *cherami.CreateConsumerRequest) cherami.Consumer {
	ret := _m.Called(request)

	var r0 cherami.Consumer
	if rf, ok := ret.Get(0).(func(*cherami.CreateConsumerRequest) cherami.Consumer); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cherami.Consumer)
		}
	}

	return r0
}

// CreateConsumerGroup provides a mock function with given fields: request
func (_m *Client) CreateConsumerGroup(request *gocherami.CreateConsumerGroupRequest) (*gocherami.ConsumerGroupDescription, error) {
	ret := _m.Called(request)

	var r0 *gocherami.ConsumerGroupDescription
	if rf, ok := ret.Get(0).(func(*gocherami.CreateConsumerGroupRequest) *gocherami.ConsumerGroupDescription); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocherami.ConsumerGroupDescription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gocherami.CreateConsumerGroupRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDestination provides a mock function with given fields: request
func (_m *Client) CreateDestination(request *gocherami.CreateDestinationRequest) (*gocherami.DestinationDescription, error) {
	ret := _m.Called(request)

	var r0 *gocherami.DestinationDescription
	if rf, ok := ret.Get(0).(func(*gocherami.CreateDestinationRequest) *gocherami.DestinationDescription); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocherami.DestinationDescription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gocherami.CreateDestinationRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePublisher provides a mock function with given fields: request
func (_m *Client) CreatePublisher(request *cherami.CreatePublisherRequest) cherami.Publisher {
	ret := _m.Called(request)

	var r0 cherami.Publisher
	if rf, ok := ret.Get(0).(func(*cherami.CreatePublisherRequest) cherami.Publisher); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cherami.Publisher)
		}
	}

	return r0
}

// DeleteConsumerGroup provides a mock function with given fields: request
func (_m *Client) DeleteConsumerGroup(request *gocherami.DeleteConsumerGroupRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gocherami.DeleteConsumerGroupRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDestination provides a mock function with given fields: request
func (_m *Client) DeleteDestination(request *gocherami.DeleteDestinationRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gocherami.DeleteDestinationRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetQueueDepthInfo provides a mock function with given fields: request
func (_m *Client) GetQueueDepthInfo(request *gocherami.GetQueueDepthInfoRequest) (*gocherami.GetQueueDepthInfoResult_, error) {
	ret := _m.Called(request)

	var r0 *gocherami.GetQueueDepthInfoResult_
	if rf, ok := ret.Get(0).(func(*gocherami.GetQueueDepthInfoRequest) *gocherami.GetQueueDepthInfoResult_); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocherami.GetQueueDepthInfoResult_)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gocherami.GetQueueDepthInfoRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConsumerGroups provides a mock function with given fields: request
func (_m *Client) ListConsumerGroups(request *gocherami.ListConsumerGroupRequest) (*gocherami.ListConsumerGroupResult_, error) {
	ret := _m.Called(request)

	var r0 *gocherami.ListConsumerGroupResult_
	if rf, ok := ret.Get(0).(func(*gocherami.ListConsumerGroupRequest) *gocherami.ListConsumerGroupResult_); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocherami.ListConsumerGroupResult_)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gocherami.ListConsumerGroupRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDestinations provides a mock function with given fields: request
func (_m *Client) ListDestinations(request *gocherami.ListDestinationsRequest) (*gocherami.ListDestinationsResult_, error) {
	ret := _m.Called(request)

	var r0 *gocherami.ListDestinationsResult_
	if rf, ok := ret.Get(0).(func(*gocherami.ListDestinationsRequest) *gocherami.ListDestinationsResult_); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocherami.ListDestinationsResult_)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gocherami.ListDestinationsRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MergeDLQForConsumerGroup provides a mock function with given fields: request
func (_m *Client) MergeDLQForConsumerGroup(request *gocherami.MergeDLQForConsumerGroupRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gocherami.MergeDLQForConsumerGroupRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PurgeDLQForConsumerGroup provides a mock function with given fields: request
func (_m *Client) PurgeDLQForConsumerGroup(request *gocherami.PurgeDLQForConsumerGroupRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gocherami.PurgeDLQForConsumerGroupRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadConsumerGroup provides a mock function with given fields: request
func (_m *Client) ReadConsumerGroup(request *gocherami.ReadConsumerGroupRequest) (*gocherami.ConsumerGroupDescription, error) {
	ret := _m.Called(request)

	var r0 *gocherami.ConsumerGroupDescription
	if rf, ok := ret.Get(0).(func(*gocherami.ReadConsumerGroupRequest) *gocherami.ConsumerGroupDescription); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocherami.ConsumerGroupDescription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gocherami.ReadConsumerGroupRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadConsumerGroupHosts provides a mock function with given fields: path, consumerGroupName
func (_m *Client) ReadConsumerGroupHosts(path string, consumerGroupName string) (*gocherami.ReadConsumerGroupHostsResult_, error) {
	ret := _m.Called(path, consumerGroupName)

	var r0 *gocherami.ReadConsumerGroupHostsResult_
	if rf, ok := ret.Get(0).(func(string, string) *gocherami.ReadConsumerGroupHostsResult_); ok {
		r0 = rf(path, consumerGroupName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocherami.ReadConsumerGroupHostsResult_)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(path, consumerGroupName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadDestination provides a mock function with given fields: request
func (_m *Client) ReadDestination(request *gocherami.ReadDestinationRequest) (*gocherami.DestinationDescription, error) {
	ret := _m.Called(request)

	var r0 *gocherami.DestinationDescription
	if rf, ok := ret.Get(0).(func(*gocherami.ReadDestinationRequest) *gocherami.DestinationDescription); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocherami.DestinationDescription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gocherami.ReadDestinationRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadPublisherOptions provides a mock function with given fields: path
func (_m *Client) ReadPublisherOptions(path string) (*gocherami.ReadPublisherOptionsResult_, error) {
	ret := _m.Called(path)

	var r0 *gocherami.ReadPublisherOptionsResult_
	if rf, ok := ret.Get(0).(func(string) *gocherami.ReadPublisherOptionsResult_); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocherami.ReadPublisherOptionsResult_)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConsumerGroup provides a mock function with given fields: request
func (_m *Client) UpdateConsumerGroup(request *gocherami.UpdateConsumerGroupRequest) (*gocherami.ConsumerGroupDescription, error) {
	ret := _m.Called(request)

	var r0 *gocherami.ConsumerGroupDescription
	if rf, ok := ret.Get(0).(func(*gocherami.UpdateConsumerGroupRequest) *gocherami.ConsumerGroupDescription); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocherami.ConsumerGroupDescription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gocherami.UpdateConsumerGroupRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDestination provides a mock function with given fields: request
func (_m *Client) UpdateDestination(request *gocherami.UpdateDestinationRequest) (*gocherami.DestinationDescription, error) {
	ret := _m.Called(request)

	var r0 *gocherami.DestinationDescription
	if rf, ok := ret.Get(0).(func(*gocherami.UpdateDestinationRequest) *gocherami.DestinationDescription); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocherami.DestinationDescription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gocherami.UpdateDestinationRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

var _ cherami.Client = (*Client)(nil)
